/**
 * 
 */
package asgn2Tests;

import static org.junit.Assert.*;

import org.junit.Test;

import asgn2Passengers.Business;
import asgn2Passengers.First;
import asgn2Passengers.PassengerException;

/**
 * @author Jason
 *
 */
public class FirstTests {

	/**
	 * Test method for {@link asgn2Passengers.First#noSeatsMsg()}.
	 * @throws PassengerException 
	 */
	@Test
	public void testNoSeatsMsg() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 2;
		
		First passenger = new First(bookingTime,departureTime);
		
		assertEquals("No seats available in First", passenger.noSeatsMsg());
	}

	/**
	 * Test method for {@link asgn2Passengers.First#upgrade()}.
	 * @throws PassengerException 
	 */
	@Test
	public void testUpgrade() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 2;
		
		First passenger = new First(bookingTime,departureTime);
		
		if( passenger.upgrade() instanceof First) {
		    assertTrue(true);
		} else {
			fail("Upgraded First passenger is of unexpected type");
		}
	}
	
	/**
	 * Test method for {@link asgn2Passengers.First#First()}.
	 */
	@Test
	public void testFirst() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.First#First(int, int)}.
	 * @throws PassengerException 
	 */
	@Test
	public void testFirstConstructorNormalGetTimes() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 2;
		
		First passenger = new First(bookingTime,departureTime);
		
		assertEquals(bookingTime,passenger.getBookingTime());
		assertEquals(departureTime,passenger.getDepartureTime());
	}

	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#Passenger(int, int)}.
	 */
	@Test
	public void testFirstConstructorNormalGetStates() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 2;
		
		First passenger = new First(bookingTime,departureTime);
		
		assertTrue(passenger.isNew());
		assertFalse(passenger.isConfirmed());
		assertFalse(passenger.isFlown());
		assertFalse(passenger.isQueued());
		assertFalse(passenger.isRefused());
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#Passenger(int, int)}.
	 */
	@Test (expected = PassengerException.class)
	public void testConstructorNegativeDepartureTimeException() throws PassengerException {
		int bookingTime = 1;
		int departureTime = -1;
		
		First passenger = new First(bookingTime,departureTime);
		
		fail("No exception was thrown");
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#Passenger(int, int)}.
	 */
	@Test
	public void testConstructorZeroDepartureTimeException() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 0;
		
		First passenger = new First(bookingTime,departureTime);
		
		fail("No exception was thrown");
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#Passenger(int, int)}.
	 */
	@Test
	public void testConstructorZeroBookingTimeException() throws PassengerException {
		int bookingTime = 0;
		int departureTime = 1;
		
		First passenger = new First(bookingTime,departureTime);
		
		assertEquals(bookingTime, passenger.getBookingTime());
		assertEquals(departureTime, passenger.getDepartureTime());
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#Passenger(int, int)}.
	 */
	@Test (expected = PassengerException.class)
	public void testConstructorNegativeBookingTimeException() throws PassengerException {
		int bookingTime = -1;
		int departureTime = 1;
		
		First passenger = new First(bookingTime, departureTime);
		
		fail("No exception was thrown");
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#Passenger(int, int)}.
	 */
	@Test 
	public void testConstructorBookingTimeLessThanDepartureTimeException() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 2;
		
		First passenger = new First(bookingTime,departureTime);
		
		assertEquals(bookingTime, passenger.getBookingTime());
		assertEquals(departureTime, passenger.getDepartureTime());
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#Passenger(int, int)}.
	 */
	@Test (expected = PassengerException.class)
	public void testConstructorBookingTimeGreaterThanDepartureTimeException() throws PassengerException {
		int bookingTime = 2;
		int departureTime = 1;
		
		First passenger = new First(bookingTime,departureTime);
		
		fail("No exception was thrown");
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#Passenger(int, int)}.
	 */
	@Test
	public void testConstructorBookingTimeEqualToDepartureTimeException() throws PassengerException {
		int bookingTime = 2;
		int departureTime = 2;
		
		First passenger = new First(bookingTime,departureTime);
		
		assertEquals(bookingTime, passenger.getBookingTime());
		assertEquals(departureTime, passenger.getDepartureTime());
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#Passenger()}.
	 */
	@Test
	public void testPassenger() {
		assertTrue(true);
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#cancelSeat(int)}.
	 * @throws PassengerException 
	 */
	@Test
	public void testCancelSeatFromConfirmedGetState() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 3;
		int confirmationTime = 1;
		int cancellationTime = 2;
		
		First passenger = new First(bookingTime,departureTime);
		passenger.confirmSeat(confirmationTime, departureTime);
		passenger.cancelSeat(cancellationTime);
		
		assertTrue(passenger.isNew());
		assertFalse(passenger.isConfirmed());
		assertFalse(passenger.isFlown());
		assertFalse(passenger.isQueued());
		assertFalse(passenger.isRefused());
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#cancelSeat(int)}.
	 * @throws PassengerException 
	 */
	@Test
	public void testCancelSeatFromConfirmedGetTimes() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 3;
		int confirmationTime = 1;
		int cancellationTime = 2;
		
		First passenger = new First(bookingTime,departureTime);
		passenger.confirmSeat(confirmationTime, departureTime);
		passenger.cancelSeat(cancellationTime);
		
		assertEquals(cancellationTime, passenger.getBookingTime());
		assertEquals(departureTime, passenger.getDepartureTime());
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#cancelSeat(int)}.
	 * @throws PassengerException 
	 */
	@Test (expected = PassengerException.class)
	public void testCancelSeatFromNew() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 3;
		int cancellationTime = 2;
		
		First passenger = new First(bookingTime,departureTime);
		passenger.cancelSeat(cancellationTime);
		
		fail("No exception was thrown");
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#cancelSeat(int)}.
	 * @throws PassengerException 
	 */
	@Test (expected = PassengerException.class)
	public void testCancelSeatFromQueued() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 3;
		int queueTime = 2;
		int cancellationTime = 2;
		
		First passenger = new First(bookingTime,departureTime);
		passenger.queuePassenger(queueTime, departureTime);
		passenger.cancelSeat(cancellationTime);
		
		fail("No exception was thrown");
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#cancelSeat(int)}.
	 * @throws PassengerException 
	 */
	@Test (expected = PassengerException.class)
	public void testCancelSeatFromRefused() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 3;
		int refusalTime = 2;
		int cancellationTime = 2;
		
		First passenger = new First(bookingTime,departureTime);
		passenger.refusePassenger(refusalTime);
		passenger.cancelSeat(cancellationTime);
		
		fail("No exception was thrown");
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#cancelSeat(int)}.
	 * @throws PassengerException 
	 */
	@Test (expected = PassengerException.class)
	public void testCancelSeatFromFlown() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 3;
		int confirmationTime = 2;
		int cancellationTime = 2;
		
		First passenger = new First(bookingTime,departureTime);
		passenger.confirmSeat(confirmationTime, departureTime);
		passenger.flyPassenger(departureTime);
		passenger.cancelSeat(cancellationTime);
		
		fail("No exception was thrown");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#confirmSeat(int, int)}.
	 * @throws PassengerException 
	 */
	@Test
	public void testConfirmSeatFromNewGetState() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 3;
		int confirmationTime = 1;
		
		First passenger = new First(bookingTime,departureTime);
		passenger.confirmSeat(confirmationTime, departureTime);
		
		assertFalse(passenger.isNew());
		assertTrue(passenger.isConfirmed());
		assertFalse(passenger.isFlown());
		assertFalse(passenger.isQueued());
		assertFalse(passenger.isRefused());
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#confirmSeat(int, int)}.
	 * @throws PassengerException 
	 */
	@Test
	public void testConfirmSeatFromNewGetTimes() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 3;
		int confirmationTime = 1;
		
		First passenger = new First(bookingTime,departureTime);
		passenger.confirmSeat(confirmationTime, departureTime);
		
		assertEquals(bookingTime, passenger.getBookingTime());
		assertEquals(departureTime, passenger.getDepartureTime());
		assertEquals(confirmationTime, passenger.getConfirmationTime());
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#confirmSeat(int, int)}.
	 * @throws PassengerException 
	 */
	@Test
	public void testConfirmSeatFromQueuedGetState() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 3;
		int queueTime = 1;
		int confirmationTime = 1;
		
		First passenger = new First(bookingTime,departureTime);
		passenger.queuePassenger(queueTime, departureTime);
		passenger.confirmSeat(confirmationTime, departureTime);
		
		assertFalse(passenger.isNew());
		assertTrue(passenger.isConfirmed());
		assertFalse(passenger.isFlown());
		assertFalse(passenger.isQueued());
		assertFalse(passenger.isRefused());
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#confirmSeat(int, int)}.
	 * @throws PassengerException 
	 */
	@Test
	public void testConfirmSeatFromQueuedGetTimes() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 3;
		int queueTime = 1;
		int confirmationTime = 1;
		
		First passenger = new First(bookingTime,departureTime);
		passenger.queuePassenger(queueTime, departureTime);
		passenger.confirmSeat(confirmationTime, departureTime);

		assertEquals(bookingTime, passenger.getBookingTime());
		assertEquals(departureTime, passenger.getDepartureTime());
		assertEquals(queueTime, passenger.getEnterQueueTime());
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#confirmSeat(int, int)}.
	 * @throws PassengerException 
	 */
	@Test (expected = PassengerException.class)
	public void testConfirmSeatFromConfirmed() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 3;
		int confirmationTime = 2;
		
		First passenger = new First(bookingTime,departureTime);
		passenger.confirmSeat(confirmationTime, departureTime);
		passenger.confirmSeat(confirmationTime, departureTime);
		
		fail("No exception was thrown");
	}
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#confirmSeat(int, int)}.
	 * @throws PassengerException 
	 */
	@Test (expected = PassengerException.class)
	public void testConfirmSeatFromRefused() throws PassengerException {
		int bookingTime = 1;
		int departureTime = 3;
		int refusalTime = 2;
		
		First passenger = new First(bookingTime,departureTime);
		passenger.confirmSeat(confirmationTime, departureTime);
		passenger.refusePassenger(refusalTime);
		
		fail("No exception was thrown");
	}
	
	
	
	/**
	 * Test method for {@link asgn2Passengers.Passenger#flyPassenger(int)}.
	 */
	@Test
	public void testFlyPassenger() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#getBookingTime()}.
	 */
	@Test
	public void testGetBookingTime() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#getConfirmationTime()}.
	 */
	@Test
	public void testGetConfirmationTime() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#getDepartureTime()}.
	 */
	@Test
	public void testGetDepartureTime() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#getEnterQueueTime()}.
	 */
	@Test
	public void testGetEnterQueueTime() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#getExitQueueTime()}.
	 */
	@Test
	public void testGetExitQueueTime() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#getPassID()}.
	 */
	@Test
	public void testGetPassID() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#isConfirmed()}.
	 */
	@Test
	public void testIsConfirmed() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#isFlown()}.
	 */
	@Test
	public void testIsFlown() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#isNew()}.
	 */
	@Test
	public void testIsNew() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#isQueued()}.
	 */
	@Test
	public void testIsQueued() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#isRefused()}.
	 */
	@Test
	public void testIsRefused() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#queuePassenger(int, int)}.
	 */
	@Test
	public void testQueuePassenger() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#refusePassenger(int)}.
	 */
	@Test
	public void testRefusePassenger() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#toString()}.
	 */
	@Test
	public void testToString() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#wasConfirmed()}.
	 */
	@Test
	public void testWasConfirmed() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#wasQueued()}.
	 */
	@Test
	public void testWasQueued() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link asgn2Passengers.Passenger#copyPassengerState(asgn2Passengers.Passenger)}.
	 */
	@Test
	public void testCopyPassengerState() {
		fail("Not yet implemented");
	}

}
