package asgn2Tests;


import static org.junit.Assert.*;
import org.junit.Test;

import asgn2Passengers.First;
import asgn2Passengers.PassengerException;

public class FirstTestsInitial {
	
	@Test
	public void testConstructor() throws PassengerException {
		int bookingTime = -1;
		int DepartureTime = 1;
		
		First passenger = new First(bookingTime,DepartureTime);
		
		assertTrue(passenger.isNew());
		assertFalse(passenger.isConfirmed());
		assertFalse(passenger.isFlown());
		assertFalse(passenger.isQueued());
		assertFalse(passenger.isRefused());
	}
	
	@Test (expected = PassengerException.class)
	public void testConstructorNegativeDepartureTimeException() throws PassengerException {
		int bookingTime = -1;
		int DepartureTime = 1;
		
		First passenger = new First(bookingTime,DepartureTime);
	}
	
	@Test
	public void testConstructorZeroDepartureTimeException() throws PassengerException {
		int bookingTime = -1;
		int DepartureTime = 1;
		
		First passenger = new First(bookingTime,DepartureTime);
		
		assertTrue(true);
	}
	
	@Test (expected = PassengerException.class)
	public void testConstructorZeroBookingTimeException() throws PassengerException {
		int bookingTime = 1;
		int DepartureTime = 0;
		
		First passenger = new First(bookingTime,DepartureTime);
	}
	
	@Test (expected = PassengerException.class)
	public void testConstructorNegativeBookingTimeException() throws PassengerException {
		int bookingTime = 1;
		int DepartureTime = -1;
		
		First passenger = new First(bookingTime,DepartureTime);
	}
	
	
	@Test (expected = PassengerException.class)
	public void testConstructorBookingTimeLessThanDepartureTimeException() throws PassengerException {
		int bookingTime = 1;
		int DepartureTime = 2;
		
		First passenger = new First(bookingTime,DepartureTime);
	}
	
	@Test
	public void testConstructorBookingTimeGreaterThanDepartureTimeException() throws PassengerException {
		int bookingTime = 2;
		int DepartureTime = 1;
		
		First passenger = new First(bookingTime,DepartureTime);
		
		assertTrue(true);
	}
	
	@Test
	public void testConstructorBookingTimeEqualToDepartureTimeException() throws PassengerException {
		int bookingTime = 2;
		int DepartureTime = 2;
		
		First passenger = new First(bookingTime,DepartureTime);
		
		assertTrue(true);
	}

}
